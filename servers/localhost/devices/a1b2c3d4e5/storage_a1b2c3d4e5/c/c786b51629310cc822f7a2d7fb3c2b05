//----------------------
// Load Kernel functions
//----------------------

class _kernel {
	#_cmd_queue = []; // Очередь на выполнение команд
	#_vars = {
		paths: ["bin"],
		init:"shell"
	};
	getVar(a) {
		return this.#_vars[a];
	};
	setVar(a,b) {
		return this.#_vars[a] = b;
	};
	initScript(path) {
		__vm.sendCommand("interfaces/storage/"+__boot.storage+"/readdata",{path:path},function(d){
			if (d !== false) {
				__vm.runScript(d);
			} else {
				__vm.sendError("Undefined script: "+path);
			};
		})
	}
}

const ___k = new _kernel();

//___k.initScript("kernel/proc");
//___k.initScript("init");

const GL = new __glframe(800,600);
const GLCTX = GL.getContext("2d");

mouse_x = 0;
mouse_y = 0;

var a = true;
GLCTX.fillStyle="black";
setInterval(function(){
	
	GLCTX.fillStyle="black"
	GLCTX.fillRect(0,0,800,600);
	GLCTX.fillStyle="red";
	GLCTX.lineWidth = 4;
	GLCTX.font = "24px VGA";
		
	GLCTX.fillText("initializing", 16, 32);
	GLCTX.beginPath();
	GLCTX.arc(mouse_x,mouse_y, 6, 0, 2 * Math.PI, false);
	GLCTX.fill();
	__vm.sendCommand("interfaces/display/display_a1b2c3d4e5/setFrame",GL.toDataURL());
}.bind(this),1000/30);

__vm.listenEvent("interfaces/mouse/mouse_a1b2c3d4e5/move",function(d){
	mouse_x = d.x;
	mouse_y = d.y;
});