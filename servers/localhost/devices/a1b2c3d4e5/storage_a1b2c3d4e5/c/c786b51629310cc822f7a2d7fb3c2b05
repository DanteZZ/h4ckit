
//----------------------
// Load Kernel functions
//----------------------

class _kernel {
	#_cmd_queue = []; // Очередь на выполнение команд
	initScript(path) {
		__vm.sendCommand("interfaces/storage/"+__boot.storage+"/readdata",{path:path},function(d){
			if (d !== false) {
				__vm.runScript(d);
			} else {
				__vm.sendError("Undefined script: "+path);
			};
			
		})
	}
}

__vm.regCommand("sendShit",function(d){
	__vm.sendCommand("interfaces/ethernet/eth0_a1b2c3d4e5/send",d);
},this) 

const _k = new _kernel();

function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min)) + min; //Максимум не включается, минимум включается
};

const GL = new _glframe(800,600);
const GLCTX = GL.getContext("2d");




var a = true;
setInterval(function(){
	let c = "red";
	let s = 32;
	for (var x = 0; x<=20;x++) {
		for (var y = 0; y<=20;y++) {
			if (!a) { c = "blue";} else {c = "red";};
			GLCTX.fillStyle=c;
			GLCTX.fillRect(x*s,y*s,s,s);
			a = !a;
		}
	};
	__vm.sendCommand("interfaces/display/display_a1b2c3d4e5/setFrame",GL.toDataURL());
	
}.bind(this),1000/30);


//----------------------
// Load Kernel modules
//----------------------

_k.initScript("kernel/interfaces/interfaces");

__vm.listenEvent("interfaces/ethernet/eth0_a1b2c3d4e5/rx",function(d){
	__vm.sendLog(["Router 1: i get ",d]);
});
