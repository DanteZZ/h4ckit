//----------------------
// Load Kernel functions
//----------------------

class _kernel {
	#_cmd_queue = []; // Очередь на выполнение команд
	#_vars = {
		paths: ["bin"],
		init:"shell"
	};
	getVar(a) {
		return this.#_vars[a];
	};
	setVar(a,b) {
		return this.#_vars[a] = b;
	};
	initScript = (path) => new Promise ((res,rej)=> {
		__vm.sendCommand("interfaces/storage/"+__boot.storage+"/readdata",{path},(d) => {
			if (d !== false) {
				__vm.runScript(d);
				res();
			} else {
				rej("Undefined script: "+path);
				__vm.sendError("Undefined script: "+path);
			};
		})
	});
	importLibrary = (path, _imports={}) => new Promise((res,rej) => {
		__vm.sendCommand("interfaces/storage/"+__boot.storage+"/readdata",{path},(d) => {
			if (d !== false) {
				const ctx = __thread.mk({exports:undefined, _imports});
				try {
					__thread.runScript(ctx,d);
				} catch (e) {
					rej(e);
				}
				res(ctx.exports);
			} else {
				rej("Undefined module: "+path);
				__vm.sendError("Undefined module: "+path);
			};
		})
	})
}

const ___k = new _kernel();

const initModules = async () => {

	await ___k.initScript("libs/fs");
	await ___k.initScript("sbin/shell");

	await __CLI.runCommand("ls");
	await __CLI.runCommand("lsd",["--r","--watch"]);
	__vm.sendLog(__CLI);
	
}

initModules();

mouse_x = 0;
mouse_y = 0;

__vm.listenEvent("interfaces/mouse/mouse_a1b2c3d4e5/move",function(d){
	mouse_x = d.x;
	mouse_y = d.y;
});