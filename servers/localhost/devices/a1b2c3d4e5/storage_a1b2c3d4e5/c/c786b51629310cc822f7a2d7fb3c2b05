//----------------------
// Load Kernel functions
//----------------------

class _kernel {
	#_cmd_queue = []; // Очередь на выполнение команд
	#_vars = {
		paths: ["bin"],
		init:"shell"
	};
	getVar(a) {
		return this.#_vars[a];
	};
	setVar(a,b) {
		return this.#_vars[a] = b;
	};
	initScript = (path) => new Promise ((res,rej)=> {
		__vm.sendCommand("interfaces/storage/"+__boot.storage+"/readdata",{path},(d) => {
			if (d !== false) {
				__vm.runScript(d);
				
				res();
			} else {
				rej("Undefined script: "+path);
				__vm.sendError("Undefined script: "+path);
			};
		})
	})
}

const ___k = new _kernel();

const initModules = async () => {
	await ___k.initScript("libs/fs");

	const dirs = await __FS.scanDir("");
	__vm.sendLog(dirs);
}

initModules();

const { _screen, createElement } = new __gl();
_screen.innerHTML = "123";

//___k.initScript("libs/terminal");

const termDOM = createElement("div");
termDOM.id = "__terminal_app";
_screen.append(termDOM);




/*
__vm.sendCommand("interfaces/storage/"+__boot.storage+"/writedata",{path:"libs/terminal", data:"Terminal"},function(d){
	__vm.sendLog(d);
})*/

mouse_x = 0;
mouse_y = 0;

__vm.listenEvent("interfaces/mouse/mouse_a1b2c3d4e5/move",function(d){
	mouse_x = d.x;
	mouse_y = d.y;
});