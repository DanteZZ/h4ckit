class _SHELL {
    constructor() {
        this.$HISTORY = [];
        this.$PRINT = [];
        this.$PATHS = ["bin/", "sbin/"];
        this.$EVENT = new ___k.EE(this);
        this.$PATH = "";
    }

    listEvent = (a,b) => this.$EVENT.on(a,b)
    unlistEvent = (a,b) => this.$EVENT.removeListener(a,b)
    
    async runCommand(command,attributes=[]) {
        const str = attributes.length > 0 ? command + " " + attributes.join(" ") : command
        this.printLn(str);
        this.$HISTORY.push(str);

        const exec = await this.searchExec(command);
        
        if (exec) {
           await ___k.PROC.run(exec,attributes);
        } else {
            this.printLn("Undefined command");
        }
    };

    printLn(string) {
        this.$PRINT.push(string);
        this.$EVENT.emit("update");
    }

    async searchExec(name) { // Поиск исполняемого файла
        let find = false;
        const paths = [this.$PATH,...this.$PATHS];
        for (var k in paths) {
            const path = paths[k]+name;
            const attrs = await ___k.FS.getAttributes(path);
            if (attrs?.exec) {
                find = path;
                break;
            };
        };
        
        return find;
    }

}

__CLI = new _SHELL();