/* IMPORTS */

var ansi2html = null;
var _input = null;
var gui = null;

let screen = _process.getScreenOwn();
const CLI = _os.__CLI;
const { createElement } = _os.__gl;

let isBlocked = false;

/* HELPERS */

/* APP */


_screenOwnHandler = (proc) => {
    proc.listEvent("exit",()=>{
        _os.setTimeout(()=>{
            screen = _process.getScreenOwn();
            if (!screen) {
                _process.exit();
                return false;
            } else {
                screen.setScreen(gui.wrapper._getNode());
            };
        },1)
    });
    return true;
}

_initialize = async () => {
    ansi2html = await _import("libs/ansi");
    _input = await _import("libs/input");

    gui = _createGraphic();
    if (!screen) {
        _process.exit();
        return false;
    } else {
        await screen.setScreen(gui.wrapper._getNode());
    };
    _registerLogic(gui);
    onPrintUpdate(gui);
}


/* HANDLERS */

const onInputSend = async (_) => {
    const str = _.input.getParam("value")
    let attributes = str.split(" ");
    const command = attributes.shift();

    _.input.setParam("value","")
    
    await CLI.runCommand(command,attributes);
}

const onPrintUpdate = (_) => {
    const html = CLI.$PRINT.map(e=>ansi2html(e)).join("\n")
    const prefix = ansi2html(`[32mroot@${CLI.$PCNAME}[0m:[34m${CLI.$PATH}[0m$`)
    _.print.putHtml(html);
    _.print.setParam("scrollTop",_.print.getParam("scrollHeight"));
    _.input_prefix.putHtml(prefix);
    if (CLI.$RUNNING) {
        setBlockInput(_,true)
    } else {
        setBlockInput(_,false)
    }
}

const setBlockInput = (_,a) => {
    isBlocked=a
    if (a) {
        _.input.blur();
        _.input_wrapper.setStyles({opacity:0});
    } else {
        _.input.focus();
        _.input_wrapper.setStyles({opacity:1});
    };
}

/* FUNCS */

const _registerLogic = (_) => {
    _input.listEvent("keydown",function(e){
        const key = e.which || e.keyCode;
        const ctrl = e.ctrlKey ? e.ctrlKey : ((key === 17) ? true : false);
        if (key === 67 && ctrl) {
            CLI.abort();
        }
    })
    _.wrapper.listEvent("submit",function(e){
        if (!isBlocked) {
            onInputSend(_);
            e.preventDefault();
        }
    })
    _.print.listEvent("wheel",function(e){
        const delta = e.deltaY || e.detail || e.wheelDelta;
        _.print.setParam("scrollTop",_.print.getParam("scrollTop")+delta);
        e.preventDefault();
    })

    _.input.listEvent("blur",function(e) {
        if (!isBlocked) {
            _.input.focus();
        }
    })

    _.input.listEvent("focus",function(e) {
        if (isBlocked) {
            _.input.blur();
        }
    })

    CLI.listEvent("update",function() {
        onPrintUpdate(_);
    })
}

const _createGraphic = () => {
    const _ = {
        wrapper: createElement("form"),
            print: createElement("pre"),
            input_wrapper: createElement("div"),
                input_prefix: createElement("div"),
                input: createElement("input")
    };

    
    // putting elements
    _.input_wrapper.putElement(_.input_prefix);
    _.input_wrapper.putElement(_.input);
    _.wrapper.putElement(_.print);
    _.wrapper.putElement(_.input_wrapper);
    
    // styling
    _.wrapper.setStyles({
        width:"100%",
        height:"100%",
        display:"flex",
        "flex-direction":"column",
        padding:"8px",
        color: "#f7f7f7",
        "background-color":"#151515"
    });
    _.print.setStyles({
        overflow:"hidden",
        color:"#d6d5d4"
    });
    _.input_wrapper.setStyles({
        display:"flex",
        "padding-top":"4px"
    });
    _.input_prefix.setStyles({
        "margin-right":"8px"
    });
    _.input.setStyles({
        "flex-grow":1,
        "font-size":"1em",
        padding:"0px",
        "caret-color": "#d6d5d4"
    });

    // properties

    _.input.setAttribute("autofocus","autofocus");
    return _;
}